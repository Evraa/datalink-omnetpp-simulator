//
// Generated file, do not edit! Created by nedtool 5.6 from frame.msg.
//

#ifndef __FRAME_M_H
#define __FRAME_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
//	Any includes goes here
//EX:
	#include <bitset>
//	#include <vector>
	typedef std::bitset<9> parity_vec;
	typedef std::bitset<8> char_vec;
	
//	typedef std::vector <std::bitset<8> > char_vec;
	
// }}

/**
 * Class generated from <tt>frame.msg:34</tt> by nedtool.
 * <pre>
 * packet Frame
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     char_vec payload[32];	//max: 256 bits	.. min: 14 bits .. by Ev Definition and assumption.
 *     parity_vec parity; 		//max: 9 bits .. min: 5
 *     int ACK;
 *     int NACK;
 * }
 * </pre>
 *
 * Frame_Base is only useful if it gets subclassed, and Frame is derived from it.
 * The minimum code to be written for Frame is the following:
 *
 * <pre>
 * class Frame : public Frame_Base
 * {
 *   private:
 *     void copy(const Frame& other) { ... }

 *   public:
 *     Frame(const char *name=nullptr, short kind=0) : Frame_Base(name,kind) {}
 *     Frame(const Frame& other) : Frame_Base(other) {copy(other);}
 *     Frame& operator=(const Frame& other) {if (this==&other) return *this; Frame_Base::operator=(other); copy(other); return *this;}
 *     virtual Frame *dup() const override {return new Frame(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Frame_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Frame)
 * </pre>
 */
class Frame_Base : public ::omnetpp::cPacket
{
  protected:
    char_vec payload[32];
    parity_vec parity;
    int ACK;
    int NACK;

  private:
    void copy(const Frame_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Frame_Base&);
    // make constructors protected to avoid instantiation
    Frame_Base(const Frame_Base& other);
    // make assignment operator protected to force the user override it
    Frame_Base& operator=(const Frame_Base& other);

  public:
    Frame_Base(const char *name=nullptr, short kind=0);
    virtual ~Frame_Base();
    virtual Frame_Base *dup() const override {return new Frame_Base (*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual unsigned int getPayloadArraySize() const;
    virtual char_vec& getPayload(unsigned int k);
    virtual const char_vec& getPayload(unsigned int k) const {return const_cast<Frame_Base*>(this)->getPayload(k);}
    virtual void setPayload(unsigned int k, const char_vec& payload);
    virtual parity_vec& getParity();
    virtual const parity_vec& getParity() const {return const_cast<Frame_Base*>(this)->getParity();}
    virtual void setParity(const parity_vec& parity);
    virtual int getACK() const;
    virtual void setACK(int ACK);
    virtual int getNACK() const;
    virtual void setNACK(int NACK);
};


#endif // ifndef __FRAME_M_H

