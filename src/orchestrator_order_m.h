//
// Generated file, do not edit! Created by nedtool 5.6 from orchestrator_order.msg.
//

#ifndef __ORCHESTRATOR_ORDER_M_H
#define __ORCHESTRATOR_ORDER_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
//	Any includes goes here
	#include <string>
	typedef std::string message_str;
// }}

/**
 * Class generated from <tt>orchestrator_order.msg:25</tt> by nedtool.
 * <pre>
 * packet Orchestrator_order
 * {
 *     \@customize(true);  // see the generated C++ header for more info
 *     int sender_id;
 *     int recv_id;
 *     double interval;
 *     message_str message_body;
 * }
 * </pre>
 *
 * Orchestrator_order_Base is only useful if it gets subclassed, and Orchestrator_order is derived from it.
 * The minimum code to be written for Orchestrator_order is the following:
 *
 * <pre>
 * class Orchestrator_order : public Orchestrator_order_Base
 * {
 *   private:
 *     void copy(const Orchestrator_order& other) { ... }

 *   public:
 *     Orchestrator_order(const char *name=nullptr, short kind=0) : Orchestrator_order_Base(name,kind) {}
 *     Orchestrator_order(const Orchestrator_order& other) : Orchestrator_order_Base(other) {copy(other);}
 *     Orchestrator_order& operator=(const Orchestrator_order& other) {if (this==&other) return *this; Orchestrator_order_Base::operator=(other); copy(other); return *this;}
 *     virtual Orchestrator_order *dup() const override {return new Orchestrator_order(*this);}
 *     // ADD CODE HERE to redefine and implement pure virtual functions from Orchestrator_order_Base
 * };
 * </pre>
 *
 * The following should go into a .cc (.cpp) file:
 *
 * <pre>
 * Register_Class(Orchestrator_order)
 * </pre>
 */
class Orchestrator_order_Base : public ::omnetpp::cPacket
{
  protected:
    int sender_id;
    int recv_id;
    double interval;
    message_str message_body;

  private:
    void copy(const Orchestrator_order_Base& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const Orchestrator_order_Base&);
    // make constructors protected to avoid instantiation
    Orchestrator_order_Base(const Orchestrator_order_Base& other);
    // make assignment operator protected to force the user override it
    Orchestrator_order_Base& operator=(const Orchestrator_order_Base& other);

  public:
    virtual ~Orchestrator_order_Base();
    virtual Orchestrator_order_Base *dup() const override {return new Orchestrator_order_Base(*this);}
    Orchestrator_order_Base(const char *name=nullptr, short kind=0);
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getSender_id() const;
    virtual void setSender_id(int sender_id);
    virtual int getRecv_id() const;
    virtual void setRecv_id(int recv_id);
    virtual double getInterval() const;
    virtual void setInterval(double interval);
    virtual message_str& getMessage_body();
    virtual const message_str& getMessage_body() const {return const_cast<Orchestrator_order_Base*>(this)->getMessage_body();}
    virtual void setMessage_body(const message_str& message_body);
};


#endif // ifndef __ORCHESTRATOR_ORDER_M_H

